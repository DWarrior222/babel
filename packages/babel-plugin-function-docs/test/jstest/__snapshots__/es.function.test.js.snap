// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`unknown plugin export声明式函数注释生成文档: export声明式函数注释生成文档 1`] = `

/**
 * 递归过滤数据
 * @param {array} list 数据源列表
 * @param {array} fnList 过滤函数列表
 * @returns {array} 过滤后的列表
 */
export function deepFilter(list = [], fnList = []) {
  if (!fnList?.length) {
    return list;
  }

  let fn = fnList.shift();

  if (typeof fn !== "function") {
    fn = (v) => v;
  }

  const data = fn(list);
  const ret = Array.isArray(data) ? data : [];
  return deepFilter(ret, fnList);
}

      ↓ ↓ ↓ ↓ ↓ ↓

/**
 * 递归过滤数据
 * @param {array} list 数据源列表
 * @param {array} fnList 过滤函数列表
 * @returns {array} 过滤后的列表
 */
export function deepFilter(list = [], fnList = []) {
  if (!fnList?.length) {
    return list;
  }

  let fn = fnList.shift();

  if (typeof fn !== "function") {
    fn = (v) => v;
  }

  const data = fn(list);
  const ret = Array.isArray(data) ? data : [];
  return deepFilter(ret, fnList);
}


`;

exports[`unknown plugin 声明式函数注释生成文档: 声明式函数注释生成文档 1`] = `

/**
 * 递归过滤数据
 * @param {array} list 数据源列表
 * @param {array} fnList 过滤函数列表
 * @returns {array} 过滤后的列表
 */
function deepFilter(list = [], fnList = []) {
  if (!fnList?.length) {
    return list;
  }
  let fn = fnList.shift();

  if (typeof fn !== "function") {
    fn = (v) => v;
  }

  const data = fn(list);
  const ret = Array.isArray(data) ? data : [];
  return deepFilter(ret, fnList);
}

      ↓ ↓ ↓ ↓ ↓ ↓

/**
 * 递归过滤数据
 * @param {array} list 数据源列表
 * @param {array} fnList 过滤函数列表
 * @returns {array} 过滤后的列表
 */
function deepFilter(list = [], fnList = []) {
  if (!fnList?.length) {
    return list;
  }

  let fn = fnList.shift();

  if (typeof fn !== "function") {
    fn = (v) => v;
  }

  const data = fn(list);
  const ret = Array.isArray(data) ? data : [];
  return deepFilter(ret, fnList);
}


`;
